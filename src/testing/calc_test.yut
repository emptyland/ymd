
CalcTest = @{
	testVarDecl : func (self) {
		Assert:EQ(0, 0)
		Assert:EQ(-1, -1)
		Assert:EQ(nil, nil)
		Assert:EQ(true, true)
		Assert:EQ(0, 0.0)
		Assert:EQ(-0.1, -0.1)
		Assert:EQ("", "")
		Assert:EQ("hash", "hash")
		Assert:NE("hash", " hash")
	},

	testAdd : func (self) {
		var m = 1, n = 100
		Assert:EQ(101, m + n)
		Assert:EQ(99,  n - m)
		Assert:EQ(-99, m - n)
		Assert:GT(2, 1)
		Assert:GE(2, 1)
		m = m + 1
		Assert:EQ(2, m)
		n = n + 100
		Assert:EQ(200, n)
		Assert:EQ(1.1, 0.1 + 1)
		Assert:EQ(0.9, -0.1 + 1)
	},

	// Mul and Div:
	testMul : func (self) {
		var m = 1, n = 100
		Assert:EQ(100, m * n)
		Assert:EQ(100, n * m)
		Assert:EQ(100, n / m)
		Assert:EQ(0, m / n)
		Assert:EQ(1, m % n)
		Assert:EQ(0, n % m)
		m = 9
		n = 9
		Assert:EQ(81, m * n)
		Assert:EQ(m * n, n * m)
		Assert:EQ(1, m / n)
		Assert:EQ(m / n, n / m)
		Assert:EQ(0, m % n)
		Assert:EQ(m % n, n % m)
		//Assert:EQ(3.3, 1.1 * 3)
		Assert:EQ(-4.4, 1.1 * -4)
		Assert:EQ(1.1, 5.5 / 5)
	},

	testBitwise : func (self) {
		Assert:EQ(-1, ~0)
		Assert:EQ(-2, ~1)
		Assert:EQ(0, ~(-1))

		Assert:EQ(0x0, 0x0 | 0x0)
		Assert:EQ(0xF, 0x7 | 0x8)
		Assert:EQ(0xABCD, 0xA0C0 | 0x0B0D)
		Assert:EQ(0x0034, 0x01234 & 0x00FF)
		Assert:EQ(0x0, 0x1 ^ 0x1)
		Assert:EQ(0x01234, 0x01234 ^ 0xABCDE ^ 0xABCDE)

		Assert:EQ(0x2, 1 << 1)
		Assert:EQ(0x8000000000000000, 1 << 63)
		Assert:EQ(1, 1 << 64)

		Assert:EQ(-1, 0x8000000000000000 >> 63) // arithmetic shift right
		Assert:EQ(1,  0x8000000000000000 |> 63) // logic shift right

		Assert:EQ(0x7, 1 | 1 << 1 | 1 << 2)
	},

	testExpr : func (self) {
		var a = 0, b = 1
		Assert:EQ(-7, 1 - b * 8 / b)
	},

	testEquals : func (self) {
		Assert:True(0 == 0)
		Assert:True(10000 == 10000)
		Assert:True(99999 == 99999)
		Assert:True(-65535 == -65535)
		Assert:True(1.0 == 1)
		Assert:True(1 == 1.0)
		Assert:True(-1.0 == -1)

		Assert:True(0 != 1)
		Assert:True(-1 != 1)
		Assert:True(0.1 != 0)
		Assert:True(1.1 != 1)
		Assert:True(-1.1 != -1)
	},

	testCompare : func (self) {
		Assert:True(0 < 1)
		Assert:True(-1 < 0)
		Assert:True(9999 < 10000)

		Assert:True(0 <= 1)
		Assert:True(0 <= 0)
		Assert:True(-1 <= 0)
		Assert:True(-1 <= -1)
		Assert:True(9999 <= 10000)
		Assert:True(9999 <= 9999)

		Assert:True(0 < 0.1)
		Assert:True(0 <= 0.1)
		Assert:True(0.1 <= 0.1)

		Assert:True(1 > 0)
		Assert:True(0 > -1)
		Assert:True(10000 > 9999)

		Assert:True(1 >= 0)
		Assert:True(0 >= 0)
		Assert:True(0 >= -1)
		Assert:True(-1 >= -1)
		Assert:True(10000 >= 9999)
		Assert:True(10000 >= 10000)

		Assert:True(0.1 > 0)
		Assert:True(0.1 >= 0)
		Assert:True(0.1 >= 0.1)
	}
}
