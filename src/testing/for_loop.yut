ForLoopTest = @{
	benchmark : 3000000,

	test_forstep_sanity : func (self) {
		var i, c = 0, k = 10000
		for i = 0, k {
			c = c + 1
		}
		Assert:EQ(k, i)
		Assert:EQ(k, c)

		for i = 0, k {
			if i == 1000 {
				break
			}
		} fail {
			Assert:EQ(1000, i)
			return
		}
		Assert:Fail("For loop fail, can not go to here.")
	},

	test_foreach_sanity : func (self) {
		var i, c = 0, k = 10000
		for i in range(0, k) {
			c = c + 1
		}
		Assert:EQ(k - 1, i)
		Assert:EQ(k, c)

		for i in range(0, k) {
			if i == 1000 {
				break
			}
		} fail {
			Assert:EQ(1000, i)
			return
		}
		Assert:Fail("For loop fail, can not go to here.")
	},

	test_foreach_benchmark : func (self) {
		for var i in range(0, self.benchmark) {
		}
	},

	test_foreach_benchmark_user : func (self) {
		var func range(i, end) {
			return func () {
				if i > end {
					return nil
				}
				i = i + 1
				return i
			}
		}
		for var i in range(0, self.benchmark) {
		}
	},

	test_forstep_benchmark : func (self) {
		var i
		for i = 0, self.benchmark {
		}
	},

	test_fail_sanity : func (self) {
		for {
			break
		} fail {
			return nil
		}
		Assert:Fail("Can not goto here, `fail' not work!")
	},

	test_fail_range : func (self) {
		var k = 1000
		for var i = 0, 10000 {
			if i == k {
				break
			}
		} fail {
			Assert:EQ(k, i)
			return nil
		}
		Assert:Fail("Can not goto here, `fail' not work!")
	},

	test_range_counting : func (self) {
		var c = 0 // counter
		var k = 65535 // max number
		for var i = 0, k {
			c = c + 1
			Assert:GT(k, i)
		} fail {
			Assert:Fail("Can not goto here.")
		}
		Assert:EQ(k, c)
	},

	test_fail_range_negative : func (self) {
		for var i = 0, 100 {

		} fail {
			Assert:Fail("Can not goto here, not fail.")
		}
	}
}
