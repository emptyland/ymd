import "testing/im_external.ymd"

ImportTest = @{
	k_flag: "test.flag",

	final : func (self) {
		for var i in values(["testing/im_external.ymd",
				"testing/im_data.ymd",
				"testing/imported1.ymd",
				"testing/imported2.ymd"]) {
			__loaded__[i] = nil
		}
	},

	testSanity : func (self) {
		var lib = import "testing/imported1.ymd"
		Assert:EQ("imported1", lib)
		lib = import "testing/imported2.ymd"
		Assert:EQ("imported2", lib)

		lib = import "testing/imported1.ymd"
		Assert:Nil(lib)
		lib = import "testing/imported2.ymd"
		Assert:Nil(lib)
	},

	testImportExternal : func (self) {
		Assert:NotNil(external)
		Assert:EQ("hashmap", typeof external)

		external:set(self.k_flag)
		Assert:EQ(self.k_flag, external:get())

		Assert:EQ("function", typeof external.foo)
		Assert:EQ("foo", external:foo())
	},

	testImportData : func (self) {
		var fileName = "testing/im_data.ymd"
		var data = import(fileName)
		Assert:NotNil(data)
		Assert:EQ("imported data", data.name)
		Assert:EQ(0x0fff, data.id)
		Assert:EQ("allow", data.token[0])
		Assert:EQ("1st", data.token[1])
		Assert:EQ("2nd", data.token[2])
		Assert:EQ("nested.inject.value", data.nested.inject.value)
		Assert:EQ(65535, data.nested.number)
	},

	testImportReached : func (self) {
		var fileName = "testing/im_external.ymd"
		var ok = import(fileName)
		Assert:Nil(ok)
	}
}
