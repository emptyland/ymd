func gfunc (a, b, c, d, e, f) {
	var k = len(argv)
	if k > 0 { Assert:EQ(a, argv[0]) }
	if k > 1 { Assert:EQ(b, argv[1]) }
	if k > 2 { Assert:EQ(c, argv[2]) }
	if k > 3 { Assert:EQ(d, argv[3]) }
	if k > 4 { Assert:EQ(e, argv[4]) }
	if k > 5 { Assert:EQ(f, argv[5]) }
	return "gfunc"
}

var func lfunc (a, b, c, d, e, f) {
	var k = len(argv)
	if k > 0 { Assert:EQ(a, argv[0]) }
	if k > 1 { Assert:EQ(b, argv[1]) }
	if k > 2 { Assert:EQ(c, argv[2]) }
	if k > 3 { Assert:EQ(d, argv[3]) }
	if k > 4 { Assert:EQ(e, argv[4]) }
	if k > 5 { Assert:EQ(f, argv[5]) }
	return "lfunc"
}

CallTest = @{
	testArgv : func (self) {
		Assert:EQ("function", typeof gfunc)
		Assert:EQ("function", typeof lfunc)
		var k = "gfunc"
		Assert:EQ(k, gfunc())
		Assert:EQ(k, gfunc(1))
		Assert:EQ(k, gfunc(1, "2"))
		Assert:EQ(k, gfunc(1, "2", []))
		Assert:EQ(k, gfunc(1, "2", [], {}))
		Assert:EQ(k, gfunc(1, "2", [], {}, func () {}))
	},

	testNested : func (self) {
		var func foo () {
			var k = len(argv)
			if k > 0 { Assert:EQ(0, argv[0]) }
			if k > 1 { Assert:EQ(1, argv[1]) }
			if k > 2 { Assert:EQ(2, argv[2]) }
			return k - 1
		}
		Assert:EQ("function", typeof foo)
		Assert:EQ(0, foo(0))
		Assert:EQ(1, foo(0, 1))
		Assert:EQ(2, foo(0, 1, 2))
		Assert:EQ(3, foo(0, 1, 2, 3))
	},

	testMethod : func (self) {
		var o = {}
		func o.init () {
			self.num = 1024
		}
		func o.set (k) {
			self.num = k
		}
		Assert:Nil(o.num)
		o:init()
		Assert:EQ(1024, o.num)
		o:set(2048)
		Assert:EQ(2048, o.num)
	},

	testClosure : func (self) {
		var func build (i) {
			return func () {
				i = i + 1
				return i
			}
		}
		var f = build(0)
		var i
		Assert:EQ("function", typeof f)
		Assert:EQ(1, f())
		Assert:EQ(2, f())
		for i in range (3, 100) {
			Assert:EQ(i, f())
		}

		f = build(-1)
		Assert:EQ("function", typeof f)
		for i in range (0, 100) {
			Assert:EQ(i, f())
		}
	},

	testFuncClosedLevels : func (self) {
		var top = "top guys"
		var func build(i) {
			var j = 5
			var k = "kk"
			return func (x) {
				var l = 6
				var m = "mm"
				return func () {
					return {
						this: self,
						top: top,
						i: i,
						j: j,
						k: k,
						l: l,
						m: m,
						x: x
					}
				}
			}
		}

		f = build(99)
		Assert:EQ("function", typeof f)
		f = f("xx")
		Assert:EQ("function", typeof f)
		f = f()
		Assert:EQ("hashmap", typeof f)
		Assert:EQ(self, f.this)
		Assert:EQ(top,  f.top)
		Assert:EQ(99,   f.i)
		Assert:EQ(5,    f.j)
		Assert:EQ("kk", f.k)
		Assert:EQ(6,    f.l)
		Assert:EQ("mm", f.m)
		Assert:EQ("xx", f.x)
	},

	test0Return : func (self) {
		var func zerof(isz) {
			if isz {
				return
			}
			return 0
		}
		Assert:EQ(0, zerof(false))
		Assert:Nil(zerof(true))
	}
}
