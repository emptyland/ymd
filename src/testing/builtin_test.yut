BuiltinTest = @{
	kTestFile1: "testing/test1.log",
	kTestFile2: "testing/test2.log",

	testLen : func (self) {
		Assert:EQ(0, len(""))
		Assert:EQ(1, len("0"))
		Assert:EQ(2, len("\n\r"))

		Assert:EQ(0, len(nil))
		Assert:EQ(0, len([]))
		Assert:EQ(0, len({}))
		Assert:EQ(0, len(@{}))

		var val = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
		Assert:EQ(13, len(val))
		insert(val, 13)
		Assert:EQ(14, len(val))

		val = { [0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4,
		        [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9,
			    [10] = 10, [11] = 11, [12] = 12 }
		Assert:EQ(13, len(val))
		insert(val, 13, 13)
		Assert:EQ(14, len(val))

		val = @{ [0] = 0, [1] = 1, [2] = 2, [3] = 3, [4] = 4,
			     [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9,
			     [10] = 10, [11] = 11, [12] = 12}
		Assert:EQ(13, len(val))
		insert(val, 13, 13)
		Assert:EQ(14, len(val))
	},

	testInsert : func (self) {
		var val = []
		Assert:EQ(0, len(val))

		insert(val, 0)
		Assert:EQ(1, len(val))
		Assert:EQ(0, val[0])

		insert(val, false)
		Assert:EQ(2, len(val))
		Assert:EQ(false, val[1])

		insert(val, "Element")
		Assert:EQ(3, len(val))
		Assert:EQ("Element", val[2])

		insert(val, func () {})
		Assert:EQ(4, len(val))
		Assert:EQ("function", typeof val[3])

		insert(val, [])
		Assert:EQ(5, len(val))
		Assert:EQ([], val[4])

		insert(val, {})
		Assert:EQ(6, len(val))
		Assert:EQ({}, val[5])

		insert(val, @{})
		Assert:EQ(7, len(val))
		Assert:EQ(@{}, val[6])
	},

	testInsertOrdered : func (self) {
		var val = [0, 1, 2, 3, 4, 5, 6, 7]
		var i = len(val);
		Assert:EQ(0, val[0])
		Assert:EQ(1, val[1])
		Assert:EQ(i, len(val))

		// Insert to [0]
		// "a", 0, 1, 2, ...
		insert(val, 0, "a")
		Assert:EQ("a", val[0])
		Assert:EQ(0, val[1])
		Assert:EQ(1, val[2])
		Assert:EQ(i + 1, len(val))

		// Insert to [2]
		// "a", 0, "b", 1, 2, ...
		insert(val, 2, "b")
		Assert:EQ(0, val[1])
		Assert:EQ("b", val[2])
		Assert:EQ(1, val[3])
	},

	testAppend : func (self) {
		var val = []
		append(val, 0, 1, 2, 3)
		Assert:EQ(4, len(val))
		Assert:EQ(0, val[0])
		Assert:EQ(1, val[1])
		Assert:EQ(2, val[2])
		Assert:EQ(3, val[3])

		append(val, 0)
		Assert:EQ(5, len(val))
		Assert:EQ(0, val[4])
	},

	testRange : func (self) {
		var iter = range(0, 0)
		Assert:Nil(iter())
		Assert:Nil(iter()) // Again

		iter = range(0, 1)
		Assert:EQ(0, iter())
		Assert:Nil(iter())

		iter = range(100, 102)
		Assert:EQ(100, iter())
		Assert:EQ(101, iter())
		Assert:Nil(iter())

		iter = range(1, 0)
		Assert:EQ(1, iter())
		Assert:Nil(iter())

		// Reserved range iterator:
		iter = range(4, 0, -2)
		Assert:EQ(4, iter())
		Assert:EQ(2, iter())
		Assert:Nil(iter())

		iter = range(0, 6, 2)
		Assert:EQ(0, iter())
		Assert:EQ(2, iter())
		Assert:EQ(4, iter())
		Assert:Nil(iter())
	},

	testContainerValues : func (self) {
		self:assertIteratorNil(values([]))
		self:assertIteratorNil(values({}))
		self:assertIteratorNil(values(@{}))

		var iter = values([0, "1", false, func () {}, [], {}, @{}])
		Assert:EQ(0, iter())
		Assert:EQ("1", iter())
		Assert:EQ(false, iter())
		Assert:EQ("function", typeof iter())
		Assert:EQ([], iter())
		Assert:EQ({}, iter())
		Assert:EQ(@{}, iter())
		Assert:Nil(iter())

		iter = values({a:0, b:1, c:2})
		Assert:EQ(0, iter())
		Assert:EQ(1, iter())
		Assert:EQ(2, iter())
		Assert:Nil(iter())

		iter = values(@{a:0, b:1, c:2})
		Assert:EQ(0, iter())
		Assert:EQ(1, iter())
		Assert:EQ(2, iter())
		Assert:Nil(iter())
	},

	testKeys : func (self) {
		self:assertIteratorNil(keys([]))
		self:assertIteratorNil(keys({}))
		self:assertIteratorNil(keys(@{}))

		var iter = keys([9, 8, 7])
		Assert:EQ(0, iter())
		Assert:EQ(1, iter())
		Assert:EQ(2, iter())
		Assert:Nil(iter())

		iter = keys({a:0, b:1, c:2})
		var set = {a: true, b: true, c: true}
		Assert:True(self:elemInSet(iter(), set))
		Assert:True(self:elemInSet(iter(), set))
		Assert:True(self:elemInSet(iter(), set))
		Assert:Nil(iter())

		iter = keys(@[<]{d:0, e:1, f:2})
		Assert:EQ("d", iter())
		Assert:EQ("e", iter())
		Assert:EQ("f", iter())
		Assert:Nil(iter())

		iter = keys(@[>]{f:0, e:1, d:2})
		Assert:EQ("f", iter())
		Assert:EQ("e", iter())
		Assert:EQ("d", iter())
		Assert:Nil(iter())
	},

	assertIteratorNil : func (self, iter) {
		for var i = 0, rand(100, 200) {
			Assert:Nil(iter())
		}
	},

	elemInSet : func (self, elem, set) {
		for var i in keys(set) {
			if elem == i {
				remove(set, elem)
				return true
			}
		}
		return false
	},

	testPairs : func (self) {
		self:assertIteratorNil(pairs([]))
		self:assertIteratorNil(pairs({}))
		self:assertIteratorNil(pairs(@{}))

		iter = pairs([0, 1, 2])
		Assert:EQ([0, 0], iter())
		Assert:EQ([1, 1], iter())
		Assert:EQ([2, 2], iter())
		Assert:Nil(iter())

		iter = pairs({a:0, b:1, c:2})
		Assert:EQ(["a", 0], iter())
		Assert:EQ(["b", 1], iter())
		Assert:EQ(["c", 2], iter())
		Assert:Nil(iter())

		iter = pairs(@[<]{a:0, b:1, c:2})
		Assert:EQ(["a", 0], iter())
		Assert:EQ(["b", 1], iter())
		Assert:EQ(["c", 2], iter())
		Assert:Nil(iter())
	},

	testStrbuf : func (self) {
		var s = strbuf()
		var i, rv
		for i = 0, 8 {
			s:cat("a")
		}
		rv = s:get()
		Assert:EQ(rv, "aaaaaaaa")
		s:clear()
		Assert:Nil(s:get())

		s = strbuf()
		print(s)
		Assert:Nil(s:get())

		s = strbuf()
		s = s:cat("a"):cat("b"):cat("c")
		Assert:EQ("abc", s:get())
	},

	testStrcatBenchmark : func (self) {
		print ("Memory begin:", gc("used"))
		var s = ""
		for var i = 0, 30000 {
			s = s .. i
		}
		print ("         end:", gc("used"))
	},

	testStrbufBenchmark : func (self) {
		print ("Memory begin:", gc("used"))
		var sb = strbuf()
		for var i = 0, 30000 {
			sb:cat(str(i))
		}
		var s = sb:get()
		print ("         end:", gc("used"))
	},

	testFile : func (self) {
		var f = open(self.kTestFile1, "w")
		var buf
		Assert:NotNil(f);
		f:write("Hello, File!\n")
		f:write("2nd Line!\n")
		f:write("3rd Line!\n")
		f:close()

		f = open(self.kTestFile1, "r")
		Assert:NotNil(f);
		buf = f:read("*line")
		Assert:EQ("Hello, File!\n", buf)
		buf = f:read("*line")
		Assert:EQ("2nd Line!\n", buf)
		buf = f:read("*line")
		Assert:EQ("3rd Line!\n", buf)
		Assert:Nil(f:read())
		f:close()
		os.remove(self.kTestFile1)
	},

	testRegex : func (self) {
		var regex = pattern "a=(\\d*)"
		var fast_match = env("*global").match

		regex = pattern "name=\\w*"
		Assert:True(match(regex, "name=a"))
		Assert:True(match(regex, "name=A"))
		Assert:True(match(regex, "name="))

		regex = pattern("name=(\\w*)")
		Assert:EQ("aaaa", match(regex, "name=aaaa")[1])
		Assert:EQ("bbbb", match(regex, "name=bbbb")[1])
		Assert:EQ("", match(regex, "name=")[1])
	},

	testRand : func (self) {
		var i, n
		for i = 0, 10000 {
			Assert:EQ("int", typeof rand())
			n = rand(10)
			Assert:GE(n, 0)
			Assert:LT(n, 10)
			n = rand(-10)
			Assert:GT(n, -10)
			Assert:LE(n, 0)
			n = rand(13, 233)
			Assert:GE(n, 13)
			Assert:LT(n, 233)
		}
	},

	testEval : func (self) {
		var n = eval("return 1111 + 256 / 2")
		Assert:EQ(1111 + 256 / 2, n)

		var func build() {
			var i, b, s = strbuf()
			for i in values(argv) {
				if b { s:cat("+") } else { b = true }
				s:cat(i)
			}
			return s:get()
		}

		n = eval("return " .. build(1, 2, 3))
		Assert:EQ(6, n)
		n = eval("return " .. build(2, 2, 2))
		Assert:EQ(6, n)
	},

	kBenchCount: 1000,

	removeRun : func (self, o) {
		var rv, i
		Assert:True((typeof o) == "hashmap" or (typeof o) == "skiplist")
		for i = 0, self.kBenchCount {
			append(o, [i, "#" .. i])
		}
		Assert:EQ(self.kBenchCount, len(o))
		Assert:EQ("#998", o[998])
		Assert:EQ("#0",   o[0])
		// Remove all!
		for i = 0, self.kBenchCount {
			rv = remove(o, i)
			if rv == 0 {
				Assert:Fail("Assert remove fail! index: " .. i)
			}
		}
		Assert:EQ(0, len(o))
		Assert:Nil(o[998])
		Assert:Nil(o[0])
	},

	testRemove : func (self) {
		self:removeRun({})
		self:removeRun(@{})
	},

	testSlice : func (self) {
		var k = "0123456789"
		Assert:EQ("123456789", slice(k, 1))
		Assert:EQ("123456789", slice(k, 1, 9))
		Assert:EQ("9", slice(k, 9, 1))
		Assert:EQ("9", slice(k, 9, 100))
		Assert:EQ("", slice(k, 10, 1))

		k = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
		Assert:EQ([7, 8, 9], slice(k, 7))
		Assert:EQ([9], slice(k, 9, 1))
		Assert:EQ([9], slice(k, 9, 100))

		k = @{a:1, b:2, c:3, d:4, e:5, f:6, h:8, z:9}
		Assert:EQ(@{h:8, z:9}, slice(k, "h"))
		Assert:EQ(@{c:3, d:4, e:5}, slice(k, "c", "f"))
	},

	testSplit : func (self) {
		var re = pattern "\\s+"
		Assert:EQ(["a", "b", "c"], split("a b   c", re))
		Assert:EQ(["a", "b", "c"], split("a b\t\tc\t", re))

		re = pattern "\\|"
		Assert:EQ(["a", "b", "c"], split("a|b|c", re))
		Assert:EQ(["a", "", "b", "", "c"], split("a||b||c|", re))
	},
}
