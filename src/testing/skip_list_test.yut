SkipListTest = @{
	testSanity : func (self) {
		var o = @{}
		var t = "skiplist"
		Assert:EQ(@{}, o)
		Assert:EQ(t, typeof o)

		o = @[<]{} // Skip list order by asc(default)
		Assert:EQ(@{}, o)
		Assert:EQ(t, typeof o)

		o = @[>]{} // Skip list order by dasc
		Assert:EQ(@{}, o)
		Assert:EQ(t, typeof o)

		o = @[func(){}]{} // Skip list order by user defined
		Assert:EQ(@{}, o)
		Assert:EQ(t, typeof o)
	},

	testOrderByAsc : func (self) {
		var o = @[<]{
			"a": 0,
			"b": 1,
			"c": 2
		}
		Assert:EQ([0, 1, 2], self:toArray(o))
	},

	testOrderByDasc : func (self) {
		var o = @[>]{
			"a": 0,
			"b": 1,
			"c": 2
		}
		Assert:EQ([2, 1, 0], self:toArray(o))
	},

	testOrderByUser : func (self) {
		// User defined comparing function
		var o = @[func (lhs, rhs) {
			lhs = lhs.k
			rhs = rhs.k
			return rhs - lhs
		}] {
			[{k:10, t:"xx"}] = 0,
			[{k:20, t:"hh"}] = 1,
			[{k:30, t:"dd"}] = 2
		}
		Assert:EQ([2, 1, 0], self:toArray(o))
	},

	toArray : func (self, o) {
		var a = []
		for var i in values(o) {
			append(a, i)
		}
		return a
	},

	// Internal compare should be faster than user defined.
	testOrderInternalBenchmark : func (self) {
		var o = @[>]{}
		for var i = 0, 30000 {
			o[str(i)] = i
		}
	},

	// It's should be slowly.
	testOrderUserBenchmark : func (self) {
		var func compare(lhs, rhs) {
			if lhs < rhs {
				return -1
			} elif lhs > rhs {
				return 1
			}
			return 0
		}
		var o = @[compare]{}
		for var i = 0, 30000 {
			o[str(i)] = i
		}
	},

	testSlice : func (self) {
		var o = @[<]{}
		for var i = 0, 1000 {
			o[i] = str(i)
		}
		Assert:EQ(@{[999] = "999"}, slice(o, 999))
		Assert:EQ(@{}, slice(o, 1000))
		Assert:EQ(@{[999] = "999"}, slice(o, 999, 1000))
		Assert:EQ(@{[999] = "999"}, slice(o, 1000, 999))
		Assert:EQ(@{
			[997] = "997",
			[998] = "998",
			[999] = "999"}, slice(o, 997, 1000))

		o = @[>]{}
		for i = 0, 1000 {
			o[i] = str(i)
		}
		Assert:EQ(@{[0] = "0"}, slice(o, 0))
		Assert:EQ(@{}, slice(o, -1))
		Assert:EQ(@{[1] = "1"}, slice(o, 0, 1))
		Assert:EQ(@{[1] = "1"}, slice(o, 1, 0))
	}
}

